name: Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: "Test scenario tags"
        required: false
        type: boolean
      environment:
        description: "Environment to run tests against"
        type: environment
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo BOT_TOKEN=${{ secrets.BOT_TOKEN }} >> .env
          echo MYSQL_HOST=${{ secrets.HOST }} >> .env
          echo MYSQL_PORT=${{ secrets.MYSQL_PORT }} >> .env
          echo MYSQL_USER=${{ secrets.PROD_MYSQL_USERNAME }} >> .env
          echo MYSQL_DATABASE=${{ secrets.PROD_MYSQL_DATABASE }} >> .env
          echo MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }} >> .env
          echo REDIS_HOST=${{ secrets.HOST }} >> .env
          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
          echo REDIS_USER=${{ secrets.PROD_REDIS_USERNAME }} >> .env
          echo REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }} >> .env
          echo REDIS_PREFIX=prod: >> .env

      - name: Install Dependencies and Build
        run: |
          npm install esbuild
          node scripts/build.js
          rm -rf node_modules

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true

      - name: Clear Old Contents
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            rm -rf /home/zent/* || true
            rm -rf /home/zent/.* || true

      - name: Copy Repository to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "."
          target: "/home/zent"

      - name: Deploy Discord Bot
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/zent
            docker stop discord-bot || true
            docker rm discord-bot || true
            docker rmi discord-bot-image || true
            docker build -t discord-bot-image .
            docker run -d --name discord-bot --env-file .env discord-bot-image
